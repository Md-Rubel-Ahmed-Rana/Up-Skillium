"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LessonRoutes = void 0;
const express_1 = require("express");
const controller_1 = require("./controller");
const multer_1 = __importDefault(require("../../config/multer"));
const fileUploaderMiddleware_1 = require("../../middlewares/fileUploaderMiddleware");
const jwt_1 = require("../../lib/jwt");
const router = (0, express_1.Router)();
router.post("/create", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.createLesson);
router.post("/create/type/instruction", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.createLesson);
router.post("/create/type/assignment", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.createLesson);
router.post("/create/type/quiz", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.createQuizLesson);
router.post("/create/type/video", jwt_1.JwtInstance.verifyToken, multer_1.default.single("video"), fileUploaderMiddleware_1.FileUploadMiddleware.uploadLessonVideo, controller_1.LessonController.createVideoLesson);
router.get("/", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getAllLessons);
router.get("/:id", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getLessonById);
router.get("/quiz-correct-answer/:lessonId", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getLessonByIdWithQuizCorrectAnswer);
router.patch("/:id", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.updateLesson);
router.patch("/update-quizzes/:lessonId", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.updateQuizzesInLesson);
router.delete("/:id", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.deleteLesson);
router.get("/module/:moduleId", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getLessonsByModule);
router.get("/by-instructor/lessons/:instructorId", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getAllLessonsByInstructor);
router.get("/by-instructor/quizzes/:instructorId", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getAllQuizLessonsByInstructor);
router.get("/by-instructor/assignments/:instructorId", jwt_1.JwtInstance.verifyToken, controller_1.LessonController.getAllAssignmentLessonsByInstructor);
exports.LessonRoutes = router;
